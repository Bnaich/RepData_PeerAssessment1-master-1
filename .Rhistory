Data <- cbind(dataFeatures,dataCombine)
#4 extracting the measurement on mean and std for each measurement
#Subset Name of Features by measurements on the mean and standard deviation
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
#subset the data frame data by selected names of features
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
#check the structures of Data
str(Data)
# 5 Uses descriptive activity names to name the activities in the data set
# read descriptive activity names from "activity_labels.txt"
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
# factorize variable activity in the data frame Data using descprivtive names
Data$activity<-factor(Data$activity);
Data$activity<- factor(Data$activity,labels=as.character(activityLabels$V2))
# 6 Appropriately labels the data set with descriptive variable names
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
# 7 Creates a second,independent tidy data set and ouput it
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
#unzip the file
unzip(zipfile="./data/Dataset.zip",exdir="./data")
#get the list of the files
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
# 2 read data from the files
# read the Activity file
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
# read the Subject files
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
# read features files
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
# look at the properties of the above varies
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
# 3 merging the testing and training data sets for one data set
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
#set names to variables
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
# merge columns t get the frame data for all data
dataCombine <- cbind(dataSubject,dataActivity)
Data <- cbind(dataFeatures,dataCombine)
#4 extracting the measurement on mean and std for each measurement
#Subset Name of Features by measurements on the mean and standard deviation
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
#subset the data frame data by selected names of features
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
#check the structures of Data
str(Data)
# 5 Uses descriptive activity names to name the activities in the data set
# read descriptive activity names from "activity_labels.txt"
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
# factorize variable activity in the data frame Data using descprivtive names
Data$activity<-factor(Data$activity);
Data$activity<- factor(Data$activity,labels=as.character(activityLabels$V2))
# 6 Appropriately labels the data set with descriptive variable names
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
# 7 Creates a second,independent tidy data set and ouput it
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
head(tidydata)
View(dataActivity)
#unzip the file
unzip(zipfile="./data/Dataset.zip",exdir="./data")
#get the list of the files
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
# 2 read data from the files
# read the Activity file
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
# read the Subject files
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
# read features files
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
# look at the properties of the above varies
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
# 3 merging the testing and training data sets for one data set
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
#set names to variables
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
# merge columns t get the frame data for all data
dataCombine <- cbind(dataSubject,dataActivity)
Data <- cbind(dataFeatures,dataCombine)
#4 extracting the measurement on mean and std for each measurement
#Subset Name of Features by measurements on the mean and standard deviation
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
#subset the data frame data by selected names of features
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
#check the structures of Data
str(Data)
# 5 Uses descriptive activity names to name the activities in the data set
# read descriptive activity names from "activity_labels.txt"
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
# factorize variable activity in the data frame Data using descprivtive names
Data$activity<-factor(Data$activity);
Data$activity<- factor(Data$activity,labels=as.character(activityLabels$V2))
# 6 Appropriately labels the data set with descriptive variable names
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
# 7 Creates a second,independent tidy data set and ouput it
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
data$activity
tidydata
head(tidydata)
#unzip the file
unzip(zipfile="./data/Dataset.zip",exdir="./data")
#get the list of the files
path_rf <- file.path("./data" , "UCI HAR Dataset")
files<-list.files(path_rf, recursive=TRUE)
files
# 2 read data from the files
# read the Activity file
dataActivityTest  <- read.table(file.path(path_rf, "test" , "Y_test.txt" ),header = FALSE)
dataActivityTrain <- read.table(file.path(path_rf, "train", "Y_train.txt"),header = FALSE)
# read the Subject files
dataSubjectTrain <- read.table(file.path(path_rf, "train", "subject_train.txt"),header = FALSE)
dataSubjectTest  <- read.table(file.path(path_rf, "test" , "subject_test.txt"),header = FALSE)
# read features files
dataFeaturesTest  <- read.table(file.path(path_rf, "test" , "X_test.txt" ),header = FALSE)
dataFeaturesTrain <- read.table(file.path(path_rf, "train", "X_train.txt"),header = FALSE)
# look at the properties of the above varies
str(dataActivityTest)
str(dataActivityTrain)
str(dataSubjectTrain)
str(dataSubjectTest)
str(dataFeaturesTest)
str(dataFeaturesTrain)
# 3 merging the testing and training data sets for one data set
dataSubject <- rbind(dataSubjectTrain, dataSubjectTest)
dataActivity<- rbind(dataActivityTrain, dataActivityTest)
dataFeatures<- rbind(dataFeaturesTrain, dataFeaturesTest)
#set names to variables
names(dataSubject)<-c("subject")
names(dataActivity)<- c("activity")
dataFeaturesNames <- read.table(file.path(path_rf, "features.txt"),head=FALSE)
names(dataFeatures)<- dataFeaturesNames$V2
# merge columns t get the frame data for all data
dataCombine <- cbind(dataSubject,dataActivity)
Data <- cbind(dataFeatures,dataCombine)
#4 extracting the measurement on mean and std for each measurement
#Subset Name of Features by measurements on the mean and standard deviation
subdataFeaturesNames<-dataFeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", dataFeaturesNames$V2)]
#subset the data frame data by selected names of features
selectedNames<-c(as.character(subdataFeaturesNames), "subject", "activity" )
Data<-subset(Data,select=selectedNames)
#check the structures of Data
str(Data)
# 5 Uses descriptive activity names to name the activities in the data set
# read descriptive activity names from "activity_labels.txt"
activityLabels <- read.table(file.path(path_rf, "activity_labels.txt"),header = FALSE)
# factorize variable activity in the data frame Data using descprivtive names
Data$activity<-factor(Data$activity);
Data$activity<- factor(Data$activity,labels=as.character(activityLabels$V2))
# 6 Appropriately labels the data set with descriptive variable names
names(Data)<-gsub("^t", "time", names(Data))
names(Data)<-gsub("^f", "frequency", names(Data))
names(Data)<-gsub("Acc", "Accelerometer", names(Data))
names(Data)<-gsub("Gyro", "Gyroscope", names(Data))
names(Data)<-gsub("Mag", "Magnitude", names(Data))
names(Data)<-gsub("BodyBody", "Body", names(Data))
# 7 Creates a second,independent tidy data set and ouput it
library(plyr);
Data2<-aggregate(. ~subject + activity, Data, mean)
Data2<-Data2[order(Data2$subject,Data2$activity),]
write.table(Data2, file = "tidydata.txt",row.name=FALSE)
library(datasets)
rm(datasets)
rm("datasets")
library(swirl)
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(car$speed),max(cars$dist),"SWIRL rules!")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
table(state$regio~state$Life.Exp)
xyplot(life.Exp~Income|region,layout=c(4,1)
xyplot(life.Exp~Income|region,set=state,layout=c(4,1)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
ggplot(displ,hwy,dataset=mpg)
ggplot(displ,hwy,data=mpg)
ggplot(displ,hwy,data=mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
swirl()
library(swirl)
swirl()
table(airquality$Month)
boxplot(ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality)
boxplot(Ozone~Month,data=airquality,xlab = "Month",ylab = "ozone(ppb)",col.axi = "blue",col.lab = "red")
boxplot(Ozone~Month,airquality,xlab = "Month",ylab = "ozone(ppb)",col.axi = "blue",col.lab = "red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="ozone(ppb)",col.axis = "blue",col.lab = "red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="ozone(ppb)",col.axis = "blue",col.lab = "red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="ozone(ppb)",col.axis = "blue",col.lab = "red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="ozone(ppb)",col.axis="blue",col.lab= "red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone
| (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)",col.axis="blue",col.lab="red")
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,airquality)
xyplot(Ozone~Wind,airquality,col="red",pch=8,main="Big Apple Data"
)
xyplot(Ozone~Wind,airquality,data=airquality,col="red",pch=8,main="Big Apple Data"
)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind,data=airquality,pch=8,col="red",main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone~Wind|month,data=airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(5,1))
p <- xyplot(Ozone~Wind, data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1)
)
v1
v2
myedit("plot1.R")
source("plot1.R",local=TRUE)
source(pathtofile(plot1.R),local=TRUE)
source(pathtofile{plot1.R},local=TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
mydeit(myLabels.R)
myedit(myLabels.R)
myedit("myLabels.R")
source(pathtofile("myLabels.R"))
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat| color*cut,data=diamonds,strip=FALSE,pch=20,xlab = myxlab,ylab = mylab,main=mymain)
xyplot(price~carat| color*cut,data=diamonds,strip=FALSE,pch=20,xlab = myxlab,ylab = myylab,main=mymain)
xyplot(price~carat| color*cut,data=diamonds,pch=20,xlab = myxlab,ylab = myylab,main=mymain)
sample(colors(),10)
pal <- colorRamp(c("red"),"blue")
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1
p1(2)
p1(6)
line(0xcc)
line(0XCC)
0XCC
colorRampPalette(c("red","yellow"))
p2 <-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe((p1(20)))
showMe(p1(20))
showMe(p2(20))
showMe(P2(2))
showMe(P2(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
library(swirl)
swirl()
p3 <- colorRampPalette(c("blue","green"))
p3 <- colorRampPalette(c("blue","green"), alpha =.5)
p3
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,pl(20))
View(p1)
image(volcano,pl(20))
image(volcano,col=pl(20))
View(p1)
source(p1)
View(p1)
image(volcano, col = p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,aesthetic(color=drv))
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,smooth=c("point","smooth")
)
qplot(displ,hwy,data=mpg,color=drv,geom = c("point","smooth")
)
qplot(y=hwy,data=mpg,col=drv )
qplot(y=hwy,data=mpg,color=drv )
myhigh
qplot(drv,hwy,data=mpg, geom="boxplot")
qplot(drv,hwy,data=mpg, geom="boxplot",col=manufacturer)
qplot(drv,hwy,data=mpg, geom="boxplot",color=manufacturer)
qplot(hwy, data = mpg, aesthetic(fill = drv))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(hwy, data = mpg, facets = drv ~., bindwidth = 2)
qplot(hwy, data = mpg, facets = drv ~., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~ drv)
g <- ggplot(aes(mpg, plot(displ,hwy)))
g <- ggplot_aes(mpg, plot(displ,hwy))
g <- ggplot_aes(mpg, ggplot(displ,hwy))
g <- ggplot_aes(mpg, c("displ","hwy"))
g <- ggplot(mpg, aes(displ,hwy) )
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(method="lm")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv)
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtile("Swirl Rules!")
g + geom_point() + geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink" size = 4, alpha = 1/2)
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color=drv))
g + geom_point(aes(color=drv), labs(title = "Swirl Rules!", x = "Displacement", y = "Hwy Mileage"))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + size = 2, alpha = 1/2)
g + geom_point(aes(color = drv)), size = 2, alpha = 1/2)
g + geom_point(aes(color = drv)), size = 2, alpha = 1/2))
g + geom_point(aes(color = drv), size = 2, alpha = 1/2)
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) g + geom_point(aes(color = drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +
geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color=drv)) + theme_bw
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "1", ylim = c (-3, 3))
plot(myx, myy, type = 1, ylim = c (-3, 3))
library(swirl)
swirl()
with(myx,myy,testdat)
plot(myx, myy, data= testdat, type = "1", ylim = c(-3,3))
plot(myx, myy, type = "l", ylim = c(-3,3))
ggplot(testdat,aes(x = myx, y = myy))
g <- ggplot(testdat,aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim = c(-3,3))
g + geom_line + ylim(-3,3)
g + geom_line() + ylim(-3,3)
g + geom_line() + cood_cartesian(ylim=c(-3,3)
)
g + geom_line() + coord_cartesian(ylim=c(-3,3)
)
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year))) + geom_point()
g + geom_point()
g + geom_point() + facet_grid
g + geom_point() + facet_grid(drv~y, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, colorConverter("black"))
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = ("black"))
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x="Displacement", y= "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut
)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut
)
qplot(carat, price, data = dataSubject)
qplot(carat, price, data = dataset)
qplot(carat, price, data = deamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facets(.~ cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facets= .~ cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm") + facets= .~ cut
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(data = dismonds, aes(depth, price))
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(dismonds$carat,seq(0,1,length=4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4), na.rm = TRUE)
cutpoints
cut (diamonds$carat,cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha)
g + geom_point(alpha = 1/3)
g + geom_point(alpha = 1/3) + facet_grid
g + geom_point(alpha = 1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth
g + geom_point(alpha = 1/3) + facet_grid(cut~car2) + geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(. ~ cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12,mean = rep(1:3), each = 4), sd = 0.2)
y <- rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue", pch = 19, cex = 2)
text(x +0.05, y + 0.05, lables = as. character(1:12))
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
setwd("D:/Data Science Coursera/RepData_PeerAssessment1-master")
